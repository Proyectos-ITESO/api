// <auto-generated />
using System;
using MicroJack.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicroJack.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("MicroJack.API.Models.Catalog.VehicleBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.ToTable("VehicleBrands");
                });

            modelBuilder.Entity("MicroJack.API.Models.Catalog.VehicleColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.ToTable("VehicleColors");
                });

            modelBuilder.Entity("MicroJack.API.Models.Catalog.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("MicroJack.API.Models.Catalog.VisitReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "reason");

                    b.HasKey("Id");

                    b.ToTable("VisitReasons");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "identifier");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "message");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Booth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.ToTable("Booths");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Guard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "fullName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "isActive");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "lastLogin");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "passwordHash");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "username");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Guards");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.GuardRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "assignedAt");

                    b.Property<int?>("AssignedBy")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "assignedBy");

                    b.Property<int>("GuardId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "guardId");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "roleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("GuardId", "RoleId")
                        .IsUnique();

                    b.ToTable("GuardRoles");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Resident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "addressId");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "fullName");

                    b.Property<string>("PhoneExtension")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "phoneExtension");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Residents");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "permissions");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int?>("BrandId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "brandId");

                    b.Property<int?>("ColorId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "colorId");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "licensePlate");

                    b.Property<string>("PlateImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "plateImageUrl");

                    b.Property<int?>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "typeId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("FaceImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "faceImageUrl");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "fullName");

                    b.Property<string>("IneImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "ineImageUrl");

                    b.HasKey("Id");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("MicroJack.API.Models.IntermediateRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("ApprovalToken")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "approvalToken");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "approvedAt");

                    b.Property<DateTime?>("ArrivalDateTime")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "arrivalDateTime");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "brand");

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "color");

                    b.Property<string>("CotoId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "cotoId");

                    b.Property<string>("CotoName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "cotoName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "houseNumber");

                    b.Property<string>("HousePhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "housePhone");

                    b.Property<string>("PersonVisited")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "personVisited");

                    b.Property<string>("Plates")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "plates");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<string>("VisitorName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "visitorName");

                    b.Property<bool>("WhatsappSent")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "whatsappSent");

                    b.Property<DateTime?>("WhatsappSentAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "whatsappSentAt");

                    b.HasKey("Id");

                    b.ToTable("IntermediateRegistrations");
                });

            modelBuilder.Entity("MicroJack.API.Models.PreRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime?>("ArrivalDateTime")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "arrivalDateTime");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "brand");

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "createdBy");

                    b.Property<string>("HouseVisited")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "houseVisited");

                    b.Property<string>("PersonVisited")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "personVisited");

                    b.Property<string>("Plates")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "plates");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<string>("VisitorName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "visitorName");

                    b.HasKey("Id");

                    b.ToTable("PreRegistrations");
                });

            modelBuilder.Entity("MicroJack.API.Models.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "brand");

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "color");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "comments");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<DateTime>("EntryTimestamp")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "entryTimestamp");

                    b.Property<string>("Folio")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "folio");

                    b.Property<string>("Guard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "guard");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "house");

                    b.Property<string>("Plates")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "plates");

                    b.Property<string>("RegistrationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "registrationType");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("VisitReason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "visitReason");

                    b.Property<string>("VisitedPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "visitedPerson");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "visitorName");

                    b.HasKey("Id");

                    b.HasIndex("Folio")
                        .IsUnique();

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("MicroJack.API.Models.Transaction.AccessLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "addressId");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "comments");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("EntryGuardId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "entryGuardId");

                    b.Property<DateTime>("EntryTimestamp")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "entryTimestamp");

                    b.Property<int?>("ExitGuardId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "exitGuardId");

                    b.Property<DateTime?>("ExitTimestamp")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "exitTimestamp");

                    b.Property<string>("GafeteNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "gafeteNumber");

                    b.Property<int?>("ResidentVisitedId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "residentVisitedId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "vehicleId");

                    b.Property<int?>("VisitReasonId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "visitReasonId");

                    b.Property<int>("VisitorId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "visitorId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("EntryGuardId");

                    b.HasIndex("ExitGuardId");

                    b.HasIndex("ResidentVisitedId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VisitReasonId");

                    b.HasIndex("VisitorId");

                    b.ToTable("AccessLogs");
                });

            modelBuilder.Entity("MicroJack.API.Models.Transaction.EventLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<int>("GuardId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "guardId");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "timestamp");

                    b.HasKey("Id");

                    b.HasIndex("GuardId");

                    b.ToTable("EventLogs");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.GuardRole", b =>
                {
                    b.HasOne("MicroJack.API.Models.Core.Guard", "Guard")
                        .WithMany("GuardRoles")
                        .HasForeignKey("GuardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MicroJack.API.Models.Core.Role", "Role")
                        .WithMany("GuardRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guard");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Resident", b =>
                {
                    b.HasOne("MicroJack.API.Models.Core.Address", "Address")
                        .WithMany("Residents")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Vehicle", b =>
                {
                    b.HasOne("MicroJack.API.Models.Catalog.VehicleBrand", "Brand")
                        .WithMany("Vehicles")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MicroJack.API.Models.Catalog.VehicleColor", "Color")
                        .WithMany("Vehicles")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MicroJack.API.Models.Catalog.VehicleType", "Type")
                        .WithMany("Vehicles")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");

                    b.Navigation("Color");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MicroJack.API.Models.Transaction.AccessLog", b =>
                {
                    b.HasOne("MicroJack.API.Models.Core.Address", "Address")
                        .WithMany("AccessLogs")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MicroJack.API.Models.Core.Guard", "EntryGuard")
                        .WithMany("EntryLogs")
                        .HasForeignKey("EntryGuardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MicroJack.API.Models.Core.Guard", "ExitGuard")
                        .WithMany("ExitLogs")
                        .HasForeignKey("ExitGuardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MicroJack.API.Models.Core.Resident", "ResidentVisited")
                        .WithMany("AccessLogs")
                        .HasForeignKey("ResidentVisitedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MicroJack.API.Models.Core.Vehicle", "Vehicle")
                        .WithMany("AccessLogs")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MicroJack.API.Models.Catalog.VisitReason", "VisitReason")
                        .WithMany("AccessLogs")
                        .HasForeignKey("VisitReasonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MicroJack.API.Models.Core.Visitor", "Visitor")
                        .WithMany("AccessLogs")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("EntryGuard");

                    b.Navigation("ExitGuard");

                    b.Navigation("ResidentVisited");

                    b.Navigation("Vehicle");

                    b.Navigation("VisitReason");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("MicroJack.API.Models.Transaction.EventLog", b =>
                {
                    b.HasOne("MicroJack.API.Models.Core.Guard", "Guard")
                        .WithMany("EventLogs")
                        .HasForeignKey("GuardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Guard");
                });

            modelBuilder.Entity("MicroJack.API.Models.Catalog.VehicleBrand", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MicroJack.API.Models.Catalog.VehicleColor", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MicroJack.API.Models.Catalog.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MicroJack.API.Models.Catalog.VisitReason", b =>
                {
                    b.Navigation("AccessLogs");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Address", b =>
                {
                    b.Navigation("AccessLogs");

                    b.Navigation("Residents");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Guard", b =>
                {
                    b.Navigation("EntryLogs");

                    b.Navigation("EventLogs");

                    b.Navigation("ExitLogs");

                    b.Navigation("GuardRoles");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Resident", b =>
                {
                    b.Navigation("AccessLogs");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Role", b =>
                {
                    b.Navigation("GuardRoles");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Vehicle", b =>
                {
                    b.Navigation("AccessLogs");
                });

            modelBuilder.Entity("MicroJack.API.Models.Core.Visitor", b =>
                {
                    b.Navigation("AccessLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
