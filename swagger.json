{
  "openapi": "3.0.1",
  "info": {
    "title": "MicroJack.API",
    "version": "v1"
  },
  "paths": {
    "/api/accesslogs": {
      "get": {
        "tags": [
          "Access Logs"
        ],
        "operationId": "GetAllAccessLogs",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Access Logs"
        ],
        "operationId": "CreateAccessLog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessLogCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/accesslogs/{id}": {
      "get": {
        "tags": [
          "Access Logs"
        ],
        "operationId": "GetAccessLogById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Access Logs"
        ],
        "operationId": "DeleteAccessLog",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/accesslogs/active": {
      "get": {
        "tags": [
          "Access Logs"
        ],
        "operationId": "GetActiveAccessLogs",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/accesslogs/{id}/exit": {
      "put": {
        "tags": [
          "Access Logs"
        ],
        "operationId": "RegisterExit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/addresses": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "operationId": "GetAllAddresses",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Addresses"
        ],
        "operationId": "CreateAddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/addresses/{id}": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "operationId": "GetAddressById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Addresses"
        ],
        "operationId": "UpdateAddress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Addresses"
        ],
        "operationId": "DeleteAddress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate guard and get JWT token",
        "operationId": "Login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout current guard",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/auth/change-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Change guard password",
        "operationId": "ChangePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/auth/health": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Check authentication service health and available policies",
        "operationId": "AuthHealthCheck",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/debug/users": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Debug endpoint to check existing users",
        "operationId": "DebugUsers",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/auth/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get current authenticated guard information",
        "operationId": "GetCurrentUser",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/bitacora": {
      "post": {
        "tags": [
          "Bitácora"
        ],
        "summary": "Crear una nota en la bitácora",
        "operationId": "CreateBitacoraNote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBitacoraRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Bitácora"
        ],
        "summary": "Obtener notas de bitácora (todas o filtradas por guardia/fecha)",
        "operationId": "GetBitacoraNotes",
        "parameters": [
          {
            "name": "guardId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fechaInicio",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fechaFin",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/bitacora/guardia/{guardId}": {
      "get": {
        "tags": [
          "Bitácora"
        ],
        "summary": "Obtener todas las notas de un guardia específico",
        "operationId": "GetBitacoraNotesByGuard",
        "parameters": [
          {
            "name": "guardId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/bitacora/buscar": {
      "get": {
        "tags": [
          "Bitácora"
        ],
        "summary": "Buscar notas en la bitácora por texto",
        "operationId": "SearchBitacoraNotes",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/bitacora/{id}": {
      "put": {
        "tags": [
          "Bitácora"
        ],
        "summary": "Actualizar nota de bitácora (solo autor o admins)",
        "operationId": "UpdateBitacoraNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBitacoraRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Bitácora"
        ],
        "summary": "Eliminar nota de bitácora (solo admins)",
        "operationId": "DeleteBitacoraNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/catalogs/vehicle-brands": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "operationId": "GetVehicleBrands",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Catalogs"
        ],
        "operationId": "CreateVehicleBrand",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleBrandRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/catalogs/vehicle-colors": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "operationId": "GetVehicleColors",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Catalogs"
        ],
        "operationId": "CreateVehicleColor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleColorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/catalogs/vehicle-types": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "operationId": "GetVehicleTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/catalogs/visit-reasons": {
      "get": {
        "tags": [
          "Catalogs"
        ],
        "operationId": "GetVisitReasons",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/eventlogs": {
      "get": {
        "tags": [
          "Event Logs (Bitácora)"
        ],
        "summary": "Get all event logs with optional filters",
        "operationId": "GetAllEventLogs",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "eventType",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "guardId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Event Logs (Bitácora)"
        ],
        "summary": "Create new event log entry",
        "operationId": "CreateEventLog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventLogCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/eventlogs/{id}": {
      "get": {
        "tags": [
          "Event Logs (Bitácora)"
        ],
        "summary": "Get specific event log by ID",
        "operationId": "GetEventLogById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Event Logs (Bitácora)"
        ],
        "summary": "Delete event log entry (admin only)",
        "operationId": "DeleteEventLog",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/eventlogs/recent": {
      "get": {
        "tags": [
          "Event Logs (Bitácora)"
        ],
        "summary": "Get recent event logs (last 24 hours by default)",
        "operationId": "GetRecentEventLogs",
        "parameters": [
          {
            "name": "hours",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/eventlogs/type/{eventType}": {
      "get": {
        "tags": [
          "Event Logs (Bitácora)"
        ],
        "summary": "Get event logs filtered by event type",
        "operationId": "GetEventLogsByType",
        "parameters": [
          {
            "name": "eventType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/eventlogs/severity/{severity}": {
      "get": {
        "tags": [
          "Event Logs (Bitácora)"
        ],
        "summary": "Get event logs filtered by severity level",
        "operationId": "GetEventLogsBySeverity",
        "parameters": [
          {
            "name": "severity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/eventlogs/quick": {
      "post": {
        "tags": [
          "Event Logs (Bitácora)"
        ],
        "summary": "Create event log using predefined quick event types",
        "operationId": "CreateQuickEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuickEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/upload/image": {
      "post": {
        "tags": [
          "File Upload"
        ],
        "summary": "Upload an image file (face, INE, license plate, etc.)",
        "operationId": "UploadImage",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "File Upload"
        ],
        "summary": "Delete an uploaded file",
        "operationId": "DeleteUploadedFile",
        "parameters": [
          {
            "name": "fileUrl",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/upload/images": {
      "post": {
        "tags": [
          "File Upload"
        ],
        "summary": "Upload multiple image files at once",
        "operationId": "UploadMultipleImages",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "files"
                ],
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              },
              "encoding": {
                "files": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/guards": {
      "get": {
        "tags": [
          "Guards"
        ],
        "operationId": "GetAllGuards",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Guards"
        ],
        "operationId": "CreateGuard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuardCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/guards/{id}": {
      "get": {
        "tags": [
          "Guards"
        ],
        "operationId": "GetGuardById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Guards"
        ],
        "operationId": "UpdateGuard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuardUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Guards"
        ],
        "operationId": "DeleteGuard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/casas": {
      "get": {
        "tags": [
          "Houses Management"
        ],
        "summary": "Obtener todas las casas (guardias ven extensión, admins ven teléfono del representante)",
        "operationId": "GetAllHouses",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/casas/{id}": {
      "get": {
        "tags": [
          "Houses Management"
        ],
        "summary": "Obtener información detallada de una casa",
        "operationId": "GetHouseById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/casas/{id}/representante": {
      "patch": {
        "tags": [
          "Houses Management"
        ],
        "summary": "Asignar residente representante a una casa (solo admins)",
        "operationId": "SetHouseRepresentative",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetRepresentativeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/casas/buscar": {
      "get": {
        "tags": [
          "Houses Management"
        ],
        "summary": "Buscar casas por término",
        "operationId": "SearchHouses",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/residentes/casa/{houseIdentifier}": {
      "get": {
        "tags": [
          "Resident Management"
        ],
        "summary": "Obtener residentes por casa (guardias ven extensión, admins ven teléfono)",
        "operationId": "GetResidentsByCasaWithRole",
        "parameters": [
          {
            "name": "houseIdentifier",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/residentes": {
      "post": {
        "tags": [
          "Resident Management"
        ],
        "summary": "Crear residente (solo admins y super admins)",
        "operationId": "CreateResidentWithRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/residentes/{id}/telefono": {
      "patch": {
        "tags": [
          "Resident Management"
        ],
        "summary": "Actualizar teléfono de residente (solo admins y super admins)",
        "operationId": "UpdateResidentPhoneWithRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/residentes/buscar": {
      "get": {
        "tags": [
          "Resident Management"
        ],
        "summary": "Buscar residentes (guardias ven extensión, admins ven teléfono)",
        "operationId": "SearchResidentsWithRole",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/residents": {
      "get": {
        "tags": [
          "Residents"
        ],
        "operationId": "GetAllResidents",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Residents"
        ],
        "operationId": "CreateResident",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResidentCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/residents/{id}": {
      "get": {
        "tags": [
          "Residents"
        ],
        "operationId": "GetResidentById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Residents"
        ],
        "operationId": "UpdateResident",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResidentUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Residents"
        ],
        "operationId": "DeleteResident",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/residents/address/{addressId}": {
      "get": {
        "tags": [
          "Residents"
        ],
        "operationId": "GetResidentsByAddress",
        "parameters": [
          {
            "name": "addressId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/preregistro/buscar/{plates}": {
      "get": {
        "tags": [
          "Simple Pre-Registration"
        ],
        "summary": "Busca un preregistro por placas (incluye validación de tiempo ±2hrs)",
        "operationId": "BuscarPreRegistro",
        "parameters": [
          {
            "name": "plates",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/preregistro": {
      "post": {
        "tags": [
          "Simple Pre-Registration"
        ],
        "summary": "Crear un nuevo preregistro",
        "operationId": "CrearPreRegistro",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePreRegistroRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/preregistro/entrada/{plates}": {
      "patch": {
        "tags": [
          "Simple Pre-Registration"
        ],
        "summary": "Marcar entrada de un preregistro (PENDIENTE -> DENTRO)",
        "operationId": "EntradaPreRegistro",
        "parameters": [
          {
            "name": "plates",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/preregistro/salida/{plates}": {
      "patch": {
        "tags": [
          "Simple Pre-Registration"
        ],
        "summary": "Marcar salida de un preregistro (DENTRO -> FUERA)",
        "operationId": "SalidaPreRegistro",
        "parameters": [
          {
            "name": "plates",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/preregistro/pendientes": {
      "get": {
        "tags": [
          "Simple Pre-Registration"
        ],
        "summary": "Obtener todos los preregistros pendientes",
        "operationId": "PreRegistrosPendientes",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/preregistro/buscar": {
      "get": {
        "tags": [
          "Simple Pre-Registration"
        ],
        "summary": "Buscar preregistros por término",
        "operationId": "BuscarPreRegistros",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/access/register-entry": {
      "post": {
        "tags": [
          "Unified Access Control"
        ],
        "summary": "Register a complete entry with visitor, vehicle, and access log in one operation",
        "operationId": "RegisterUnifiedEntry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnifiedEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/access/register-exit/{accessLogId}": {
      "post": {
        "tags": [
          "Unified Access Control"
        ],
        "summary": "Register visitor exit by access log ID",
        "operationId": "RegisterUnifiedExit",
        "parameters": [
          {
            "name": "accessLogId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnifiedExitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/access/active-visits": {
      "get": {
        "tags": [
          "Unified Access Control"
        ],
        "summary": "Get summary of all currently active visits",
        "operationId": "GetActiveVisits",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/vehicles": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "operationId": "GetAllVehicles",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Vehicles"
        ],
        "operationId": "CreateVehicle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/vehicles/{id}": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "operationId": "GetVehicleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Vehicles"
        ],
        "operationId": "UpdateVehicle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VehicleUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Vehicles"
        ],
        "operationId": "DeleteVehicle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/vehicles/plate/{licensePlate}": {
      "get": {
        "tags": [
          "Vehicles"
        ],
        "operationId": "GetVehicleByPlate",
        "parameters": [
          {
            "name": "licensePlate",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/visitors": {
      "get": {
        "tags": [
          "Visitors"
        ],
        "operationId": "GetAllVisitors",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Visitors"
        ],
        "operationId": "CreateVisitor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisitorCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/visitors/{id}": {
      "get": {
        "tags": [
          "Visitors"
        ],
        "operationId": "GetVisitorById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Visitors"
        ],
        "operationId": "UpdateVisitor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisitorUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Visitors"
        ],
        "operationId": "DeleteVisitor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessLogCreateRequest": {
        "type": "object",
        "properties": {
          "visitorId": {
            "type": "integer",
            "format": "int32"
          },
          "vehicleId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "addressId": {
            "type": "integer",
            "format": "int32"
          },
          "residentVisitedId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "entryGuardId": {
            "type": "integer",
            "format": "int32"
          },
          "visitReasonId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "gafeteNumber": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressCreateRequest": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressUpdateRequest": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordRequest": {
        "required": [
          "currentPassword",
          "newPassword"
        ],
        "type": "object",
        "properties": {
          "currentPassword": {
            "minLength": 1,
            "type": "string"
          },
          "newPassword": {
            "minLength": 6,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateBitacoraRequest": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePreRegistroRequest": {
        "type": "object",
        "properties": {
          "plates": {
            "type": "string",
            "nullable": true
          },
          "visitorName": {
            "type": "string",
            "nullable": true
          },
          "vehicleBrand": {
            "type": "string",
            "nullable": true
          },
          "vehicleColor": {
            "type": "string",
            "nullable": true
          },
          "houseVisited": {
            "type": "string",
            "nullable": true
          },
          "expectedArrivalTime": {
            "type": "string",
            "format": "date-time"
          },
          "personVisited": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateResidentRequest": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "houseIdentifier": {
            "type": "string",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventLogCreateRequest": {
        "required": [
          "description",
          "eventType"
        ],
        "type": "object",
        "properties": {
          "eventType": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "severity": {
            "type": "string",
            "nullable": true
          },
          "relatedEntityType": {
            "type": "string",
            "nullable": true
          },
          "relatedEntityId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "additionalData": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExitRequest": {
        "type": "object",
        "properties": {
          "exitGuardId": {
            "type": "integer",
            "format": "int32"
          },
          "comments": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GuardCreateRequest": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GuardInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isAdmin": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GuardUpdateRequest": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LoginRequest": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "guard": {
            "$ref": "#/components/schemas/GuardInfo"
          }
        },
        "additionalProperties": false
      },
      "QuickEventRequest": {
        "required": [
          "quickEventType"
        ],
        "type": "object",
        "properties": {
          "quickEventType": {
            "minLength": 1,
            "type": "string"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "additionalData": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResidentCreateRequest": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "addressId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ResidentUpdateRequest": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "addressId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SetRepresentativeRequest": {
        "type": "object",
        "properties": {
          "residentId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UnifiedEntryRequest": {
        "required": [
          "purpose",
          "visitor"
        ],
        "type": "object",
        "properties": {
          "visitor": {
            "$ref": "#/components/schemas/VisitorRequest"
          },
          "vehicle": {
            "$ref": "#/components/schemas/VehicleRequest"
          },
          "residentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "house": {
            "type": "string",
            "nullable": true
          },
          "purpose": {
            "minLength": 1,
            "type": "string"
          },
          "entryTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UnifiedExitRequest": {
        "type": "object",
        "properties": {
          "exitTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "exitNotes": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateBitacoraRequest": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePhoneRequest": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VehicleBrandRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VehicleColorRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VehicleCreateRequest": {
        "type": "object",
        "properties": {
          "licensePlate": {
            "type": "string",
            "nullable": true
          },
          "plateImageUrl": {
            "type": "string",
            "nullable": true
          },
          "brandId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "colorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "typeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VehicleRequest": {
        "required": [
          "licensePlate"
        ],
        "type": "object",
        "properties": {
          "licensePlate": {
            "minLength": 1,
            "type": "string"
          },
          "plateImageUrl": {
            "type": "string",
            "nullable": true
          },
          "brandId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "colorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "typeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VehicleUpdateRequest": {
        "type": "object",
        "properties": {
          "licensePlate": {
            "type": "string",
            "nullable": true
          },
          "plateImageUrl": {
            "type": "string",
            "nullable": true
          },
          "brandId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "colorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "typeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VisitorCreateRequest": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "ineImageUrl": {
            "type": "string",
            "nullable": true
          },
          "faceImageUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VisitorRequest": {
        "required": [
          "fullName"
        ],
        "type": "object",
        "properties": {
          "fullName": {
            "minLength": 1,
            "type": "string"
          },
          "ineImageUrl": {
            "type": "string",
            "nullable": true
          },
          "faceImageUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VisitorUpdateRequest": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "ineImageUrl": {
            "type": "string",
            "nullable": true
          },
          "faceImageUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}